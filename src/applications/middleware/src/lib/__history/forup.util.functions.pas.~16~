unit forup.util.functions;

interface
uses System.Rtti, System.TypInfo, System.JSON, System.JSON.Builders, System.JSON.Converters,
System.Classes, System.StrUtils, System.Math, System.MaskUtils, System.Masks, System.DateUtils,
Generics.Collections, forup.util.constants, System.SysUtils;

type
  {Singleton Class - Multiple porpuse}
  TFunctions = class
    strict private
      class var FInstance : TFunctions;
      class var FClassName : string;
    private
      constructor CreatePrivate;
    public
      class procedure RegisterClass;
      class function GetFunctions : TFunctions;

      class function getLine(aValues : TArray<string>; aSeparetor : char = ','; aFormat : string = EMPTYSTRING) : string;
  end;

implementation

{ TFunctions }

constructor TFunctions.CreatePrivate;
begin
  {Destinated to apply the ambiantation for the Class}
end;

class function TFunctions.GetFunctions: TFunctions;
begin
  if not Assigned(Self.FInstance) then
    FInstance := TFunctions.CreatePrivate;

  Result := FInstance;
end;

class function TFunctions.getLine(aValues: TArray<string>; aSeparetor: char;
  aFormat: string): string;
var
  it : Integer;
begin
  Result := EMPTYSTRING;
  for it := 0 to Length(aValues)-1 do
    begin
      if it < (Length(aValues)-1) then
        Result := concat(Result, aValues[it], aSeparetor)
      else
        Result := concat(Result, aValues[it])
    end;

  if not (aFormat.isEmpty) then
    begin
      Result := Format(aFormat, [Result]);
    end;

end;

class procedure TFunctions.RegisterClass;
begin
  Self.FClassName := Self.ClassName;
end;

end.
