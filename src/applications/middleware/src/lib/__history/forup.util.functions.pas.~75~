unit forup.util.functions;

interface
uses System.Rtti, System.TypInfo, System.JSON, System.JSON.Builders, System.JSON.Converters,
System.Classes, System.StrUtils, System.Math, System.MaskUtils, System.Masks, System.DateUtils,
Generics.Collections, forup.util.constants, System.SysUtils, System.Variants, core.sql.attributes;

type
  {Singleton Class - Multiple porpuse}
  TFunctions = class
    strict private
      class var FInstance : TFunctions;
      class var FClassName : string;
    private
      constructor CreatePrivate;
    public
      class procedure RegisterClass;
      class function GetFunctions : TFunctions;

      class function getAttribute<T : TCustomAttribute>(aObj : TObject) : T; overload;
      class function getAttribute<T : TCustomAttribute>(aProp : TRttiProperty) : T; overload;
      class function getColumnValue<T : Column>(aObj : TObject; aColumnName : string) : string;

      {List manipulation}
      class function getLine(aValues : TArray<string>; aSeparetor : char = DEF_LIST_SEPARATOR; aFormat : string = EMPTYSTRING) : string; overload;
      class function getLine(aValues : TStrings; aSeparetor : char = DEF_LIST_SEPARATOR; aFormat : string = EMPTYSTRING) : string; overload;
      {End of List manipulation}


      {Database trasnform functions}
      class function db_string(aValue : string; aReturnNull : Boolean = false) : string;
      class function db_integer(aValue : string; aReturnNull : Boolean = false) : string; overload;
      class function db_integer(aValue : integer; aReturnNull : Boolean = false) : string; overload;
      class function db_double(aValue : string; aReturnNull : Boolean = false) : string; overload;
      class function db_double(aValue : Extended; aReturnNull : Boolean = false) : string; overload;
      class function db_date(aValue : string; aReturnNull : Boolean = false) : string; overload;
      class function db_date(aValue : TDate; aReturnNull : Boolean = false) : string; overload;
      class function db_time(aValue : string; aReturnNull : Boolean = false) : string; overload;
      class function db_time(aValue : TTime; aReturnNull : Boolean = false) : string; overload;
      class function db_datetime(aValue : string; aReturnNull : Boolean = false) : string; overload;
      class function db_datetime(aValue : TDateTime; aReturnNull : Boolean = false) : string; overload;
      class function db_boolean(aValue : string; aReturnNull : Boolean = false) : string; overload;
      class function db_boolean(aValue : integer; aReturnNull : Boolean = false) : string; overload;
      class function db_boolean(aValue : boolean; aReturnNull : Boolean = false) : string; overload;
      {End of Database trasnform}

      {Validation Functions}
      class function isValidDate(aDate : string) : Boolean;
      class function isValidDateTime(aDate : string) : Boolean;
      class function isValidTime(aDate : string) : Boolean;
      {End of Validation Functions}

  end;

implementation

{ TFunctions }

constructor TFunctions.CreatePrivate;
begin
  {Destinated to apply the ambiantation for the Class}
end;

class function TFunctions.db_integer(aValue: string;
  aReturnNull: Boolean): string;
var
  intVal : Integer;
begin
  if aValue.IsEmpty then
    begin
      if aReturnNull then
        begin
          Result := _NULL;
        end
      else Result := DB_CONVERT_ERROR;
    end
  else
    begin
      if aValue.ToUpper.Equals(_NULL) then
        Result := aValue
      else
        begin
          if TryStrToInt(aValue, intVal) then
            Result := aValue
          else
            Result := DB_CONVERT_ERROR;
        end;
    end;
end;

class function TFunctions.db_boolean(aValue, aReturnNull: Boolean): string;
begin
  if aReturnNull then
    begin
      Result := _NULL;
    end
  else
    begin
      if aValue then
        Result := _TRUE
      else
        Result := _FALSE;
    end;
end;

class function TFunctions.db_boolean(aValue: integer;
  aReturnNull: Boolean): string;
begin
  if aValue in [INT_0,INT_1] then
    begin
      case aValue of
        INT_0 : Result := _FALSE;
        INT_1 : Result := _TRUE;
      end;
    end
  else
    begin
      if aReturnNull then
        Result := _NULL
      else
        Result := DB_CONVERT_ERROR;
    end;
end;

class function TFunctions.db_boolean(aValue: string;
  aReturnNull: Boolean): string;
begin
  if concat(_S,RANGE_INFO,_N).Contains(aValue.ToUpper) then
    begin
      if aValue.Equals(_S) then
        Result := _TRUE;
    end
  else
    begin
      if aReturnNull then
        Result := _NULL
      else
        Result := DB_CONVERT_ERROR;
    end;
end;

class function TFunctions.db_date(aValue: TDate; aReturnNull: Boolean): string;
begin
  if aValue = Null then
    begin
      if aReturnNull then
        Result := _NULL
      else
        Result := DB_CONVERT_ERROR;
    end
  else
    begin
      Result := FormatDateTime('yyyy-mm-dd', aValue).QuotedString;
    end;
end;

class function TFunctions.db_date(aValue: string; aReturnNull: Boolean): string;
var
  dtValue : TDateTime;
  fs : TFormatSettings;
begin
  if aValue.IsEmpty then
    begin
      if aReturnNull then
        Result := _NULL
      else
        Result := DB_CONVERT_ERROR;
    end
  else
    begin
      if isValidDate(aValue) then
        begin
          fs := TFormatSettings.Create;
          dtValue := StrToDate(aValue, fs);
          Result := FormatDateTime('yyyy-mm-dd', dtValue).QuotedString;
        end
      else
        Result := DB_CONVERT_ERROR;
    end;
end;

class function TFunctions.db_datetime(aValue: TDateTime;
  aReturnNull: Boolean): string;
begin
  if aValue = Null then
    begin
      if aReturnNull then
        Result := _NULL
      else
        Result := DB_CONVERT_ERROR;
    end
  else
    begin
      Result := FormatDateTime('yyyy-mm-dd hh:mm:ss', aValue).QuotedString;
    end;
end;

class function TFunctions.db_datetime(aValue: string;
  aReturnNull: Boolean): string;
var
  dtValue : TDateTime;
  fs : TFormatSettings;
begin
  if aValue.IsEmpty then
    begin
      if aReturnNull then
        Result := _NULL
      else
        Result := DB_CONVERT_ERROR;
    end
  else
    begin
      if isValidDate(aValue) then
        begin
          fs := TFormatSettings.Create;
          dtValue := StrToDateTime(aValue, fs);
          Result := FormatDateTime('yyyy-mm-dd hh:mm:ss', dtValue).QuotedString;
        end
      else
        Result := DB_CONVERT_ERROR;
    end;
end;

class function TFunctions.db_double(aValue: string;
  aReturnNull: Boolean): string;
var
  dblValue : Extended;
  error : Boolean;
  fs : TFormatSettings;
begin
  if aValue.IsEmpty then
    begin
      if aReturnNull then
        begin
          Result := _NULL;
        end
      else Result := DB_CONVERT_ERROR;
    end
  else
    begin
      error := False;
      fs := TFormatSettings.Create;

      try
        if (Pos(fs.ThousandSeparator, aValue) > 0) then
          aValue := aValue.Replace(fs.ThousandSeparator, '', [rfReplaceAll]);

        dblValue := StrToFloat(aValue, fs);
        fs.DecimalSeparator := '.';
        Result := FloatToStr(dblValue, fs);
      except
        Result := DB_CONVERT_ERROR;
      end;
    end;
end;

class function TFunctions.db_double(aValue: Extended;
  aReturnNull: Boolean): string;
var
  fs : TFormatSettings;
begin
  try
    fs := TFormatSettings.Create;
    fs.DecimalSeparator := '.';
    Result := FloatToStr(aValue, fs);
  except
    Result := DB_CONVERT_ERROR;
  end;

end;

class function TFunctions.db_integer(aValue: integer;
  aReturnNull: Boolean): string;
begin
  try
    Result := aValue.ToString;
  except
    Result := DB_CONVERT_ERROR;
  end;
end;

class function TFunctions.db_string(aValue: string;
  aReturnNull: Boolean): string;
begin
  if aValue.IsEmpty then
    begin
      if aReturnNull then
        begin
          Result := _NULL;
        end
      else Result := QuotedStr(EmptyStr);
    end
  else
    begin
      if aValue.ToUpper.Equals(_NULL) then
        Result := aValue
      else
        Result := QuotedStr(aValue);
    end;
end;

class function TFunctions.db_time(aValue: string; aReturnNull: Boolean): string;
var
  dtValue : TDateTime;
  fs : TFormatSettings;
begin
  if aValue.IsEmpty then
    begin
      if aReturnNull then
        Result := _NULL
      else
        Result := DB_CONVERT_ERROR;
    end
  else
    begin
      if isValidDate(aValue) then
        begin
          fs := TFormatSettings.Create;
          dtValue := StrToTime(aValue, fs);
          Result := FormatDateTime('hh:mm:ss', dtValue).QuotedString;
        end
      else
        Result := DB_CONVERT_ERROR;
    end;

end;

class function TFunctions.db_time(aValue: TTime; aReturnNull: Boolean): string;
begin
  if aValue = Null then
    begin
      if aReturnNull then
        Result := _NULL
      else
        Result := DB_CONVERT_ERROR;
    end
  else
    begin
      Result := FormatDateTime('hh:mm:ss', aValue).QuotedString;
    end;
end;

class function TFunctions.getAttribute<T>(aProp: TRttiProperty) : T;
var
  Attr : TCustomAttribute;
begin
  Result := nil;
  try
    for Attr in aProp.GetAttributes do
      begin
        if Attr is T then
          begin
            Result := T(Attr);
            Break;
          end;
      end;
  finally

  end;
end;

class function TFunctions.getAttribute<T>(aObj: TObject)  : T;
var
  context : TRttiContext;
  rtype : TRttiType;
  Attr : TCustomAttribute;
begin
  Result := nil;
  context := TRttiContext.Create;
  try
    rtype := context.GetType(aObj.ClassType);

    for Attr in rtype.GetAttributes do
      begin
        if (Attr is T) then
          begin
            Result := T(Attr);
            Break;
          end;
      end;
  finally
    context.Free;
  end;
end;

class function TFunctions.GetFunctions: TFunctions;
begin
  if not Assigned(Self.FInstance) then
    FInstance := TFunctions.CreatePrivate;

  Result := FInstance;
end;

class function TFunctions.getLine(aValues: TStrings; aSeparetor: char;
  aFormat: string): string;
var
  it : Integer;
begin
  Result := EMPTYSTRING;
  for it := 0 to aValues.Count-1 do
    begin
      if it < (aValues.Count-1) then
        Result := concat(Result, aValues[it], aSeparetor)
      else
        Result := concat(Result, aValues[it])
    end;

  if not (aFormat.isEmpty) then
    begin
      Result := Format(aFormat, [Result]);
    end;
end;

class function TFunctions.getColumnValue<T>(aObj : TObject; aColumnName : string) : string;
var
  context : TRttiContext;
  rtype : TRttiType;
  aProp : TRttiProperty;
  aAttr : TCustomAttribute;
begin
  Result := EmptyStr;
  context := TRttiContext.Create;
  try
    rtype := context.GetType(aObj.ClassType);
    for aProp in rtype.GetProperties do
      begin
        for aAttr in aProp.GetAttributes do
          begin
            if (aAttr is T) then
              begin

              end;
          end;
      end;

  finally
    context.Free;
  end;
end;

class function TFunctions.isValidDate(aDate: string): Boolean;
var
  fs : TFormatSettings;
  aValue : TDateTime;
begin
  fs := TFormatSettings.Create;
  Result := TryStrToDate(aDate, aValue, fs);
end;

class function TFunctions.isValidDateTime(aDate: string): Boolean;
var
  fs : TFormatSettings;
  aValue : TDateTime;
begin
  fs := TFormatSettings.Create;
  Result := TryStrToDateTime(aDate, aValue, fs);
end;

class function TFunctions.isValidTime(aDate: string): Boolean;
var
  fs : TFormatSettings;
  aValue : TDateTime;
begin
  fs := TFormatSettings.Create;
  Result := TryStrToTime(aDate, aValue, fs);
end;

class function TFunctions.getLine(aValues: TArray<string>; aSeparetor: char;
  aFormat: string): string;
var
  it : Integer;
begin
  Result := EMPTYSTRING;
  for it := 0 to Length(aValues)-1 do
    begin
      if it < (Length(aValues)-1) then
        Result := concat(Result, aValues[it], aSeparetor)
      else
        Result := concat(Result, aValues[it])
    end;

  if not (aFormat.isEmpty) then
    begin
      Result := Format(aFormat, [Result]);
    end;
end;

class procedure TFunctions.RegisterClass;
begin
  Self.FClassName := Self.ClassName;
end;

end.
