unit core.sql.entity;

interface
uses System.Classes, System.Math, System.StrUtils, System.SysUtils, Generics.Collections,
System.JSON, System.JSON.Builders, System.JSON.Converters, System.JSON.BSON, System.JSON.Types,
forup.util.constants, core.sql.attributes, System.Rtti, System.TypInfo, System.Types, forup.util.types;

type
  {$M+}
  TBaseEntity = class(TObject)
    protected
      FBaseCriteria: TDBCriteria;
    private
      class var FClassName : string;
      function getTableName : string;
      function getPKColumns : TDictionary<string, string>;
      function getAllColmuns : string;
      function getColumnsList : TDictionary<string, TDBtype>;
      function getColumnsValues : TDictionary<string, string>;
      function getDDL : TStringList;
      function getInsertFields : string;
      function getColumnAttribute<T : TCustomAttribute>(aColName : String) : T;
    public
      class procedure RegisterClass;
      constructor CreateEntity;
    published
      property TableName : string read getTableName;
      property PKColumns : TDictionary<string, string> read getPKColumns;
      property AllColumns : string read getAllColmuns;
      property InsrtFields : string read getInsertFields;
      property ColumnsList : TDictionary<string, TDBtype> read getColumnsList;
      property ColumnsValues : TDictionary<string, string> read getColumnsValues;
      property DDL : TStringList read getDDL;
      property BaseCriteria: TDBCriteria read FBaseCriteria write FBaseCriteria;

  end;


implementation
uses forup.util.functions;
{ TBaseEntity }

constructor TBaseEntity.CreateEntity;
begin
  inherited Create;
  Self.FBaseCriteria := TDBCriteria.Create();
end;

function TBaseEntity.getAllColmuns: string;
var
  aColumns : TDictionary<string, TDBtype>;
  aTableName : string;
  aTotal : Integer;
  I : Integer;
begin
  Result := '*';
  aTableName := Self.TableName;
  aColumns := Self.ColumnsList;

  aTotal := aColumns.Count;
  if aTotal > 0 then
    begin
      Result := EMPTYSTRING;
      for I := 0 to (aTotal-1) do
        begin
          Result := concat(aTableName,
            IfThen(aTableName.IsEmpty,EmptyStr,'.'),
            aColumns.Keys.ToArray[I],
            IfThen(I < (aTotal-1),',',EmptyStr));
        end;
    end;
end;

function TBaseEntity.getColumnAttribute<T>(aColName: String): T;
var
  context : TRttiContext;
  rtype : TRttiType;
  aProp : TRttiProperty;
  aAttribute : TCustomAttribute;
begin
  context := TRttiContext.Create;
  Result := nil;
  try
    rtype := context.GetType(Self.ClassType);
    Result := nil;
    if rtype <> nil then
      begin
        for aProp in rtype.GetProperties do
          begin
            if UpperCase(aProp.Name).Equals(aColName.ToUpper) then
              begin
                for aAttribute in aProp.GetAttributes do
                  begin
                    if aAttribute is T then
                      begin
                        Result := T(aAttribute);
                        break;
                      end;
                  end;
                break;
              end;
          end;
      end
    else raise Exception.Create('[BaseEntity][getColumnAttribute][No property found for the object "'+Self.UnitName+'"]');

    if Result = nil then
      begin
        raise Exception.Create('[BaseEntity][getColumnAttribute][No property found named "'+aColName+'" '+
        'or Attribute Type not defined.]');
      end;
  except
    //Log Exception
  end;
end;

function TBaseEntity.getColumnsList: TDictionary<string, TDBtype>;
var
  context : TRttiContext;
  rtype : TRttiType;
  aProp : TRttiProperty;
  colAttr : Column;
begin
  Result := TDictionary<string, TDBtype>.Create;
  context := TRttiContext.Create;

  try
    rtype := context.GetType(Self.ClassType);
    for aProp in rtype.GetProperties do
      begin
        colAttr := TFunctions.getAttribute<Column>(aProp);
        if Assigned(colAttr) then
          begin
            Result.Add(colAttr.ColumnName, colAttr.FieldType);
          end;
      end;

  finally
    context.Free;
  end;
end;

function TBaseEntity.getColumnsValues : TDictionary<string, string>;
var
  context : TRttiContext;
  rtype : TRttiType;
  aProp : TRttiProperty;
  colAttr : Column;
begin
  Result := TDictionary<string, string>.Create;
  context := TRttiContext.Create;

  try
    rtype := context.GetType(Self.ClassType);
    for aProp in rtype.GetProperties do
      begin
        colAttr := TFunctions.getAttribute<Column>(aProp);
        if Assigned(colAttr) then
          begin
            Result.Add(colAttr.ColumnName, aProp.GetValue(Self).AsString);
          end;
      end;

  finally
    context.Free;
  end;
end;

function TBaseEntity.getDDL: TStringList;
begin
  Result := TStringList.Create;
end;

function TBaseEntity.getInsertFields: string;
var
  insertCols : TStringList;
  aCol : TPair<string, TDBtype>;
  aPK : TPK;
  aAttrCol : Column;
begin
  insertCols := TStringList.Create;
  with TFunctions.GetFunctions.getAttribute<PrimaryKey>(Self) do
    begin
      for aPK in Columns do
        begin
          if (aPK.AutoGenerate in [TGenerated.Always, TGenerated.Insert]) and
             (aPK.SequenceType in [TSequenceType.NotInc]) then
            begin
              insertCols.Add(aPK.Column);
            end;
        end;
    end;

  for aCol in Self.ColumnsList do
    begin
      aAttrCol := getColumnAttribute<Column>(aCol.Key);
      if aAttrCol <> nil then
        begin
          if ([TExtraAction.doInsert, TExtraAction.doAll] <= aAttrCol.ExtraActions) then
            begin
              if not ([noInsert] <= aAttrCol.Restrictions) then
                begin
                  insertCols.Add(aCol.Key);
                end;
            end;
        end;
    end;
end;

function TBaseEntity.getPKColumns: TDictionary<string, string>;
var
  PKs : PrimaryKey;
  aPK : TPK;
begin
  PKs := TFunctions.GetFunctions.getAttribute<PrimaryKey>(Self);
  Result := TDictionary<string, string>.Create;
  if Assigned(PKs) then
    begin
      for aPK in PKs.Columns do
        begin
          Result.Add(aPK.Column,
                     TFunctions.GetFunctions.getColumnValue(Self, aPK.Column));
        end;
    end;
end;

function TBaseEntity.getTableName: string;
var
  tableAttr : Table;
begin
  Result := EmptyStr;
  tableAttr := TFunctions.GetFunctions.getAttribute<Table>(Self);

  if Assigned(tableAttr) then
    Result := tableAttr.Name;
end;

class procedure TBaseEntity.RegisterClass;
begin
  Self.FClassName := Self.ClassName;
end;

end.
