unit core.sql.builder;

interface
uses System.SysUtils, System.StrUtils, System.DateUtils, System.JSON, System.JSON.Builders, System.JSON.BSON,
     Generics.Collections, core.sql.entity, core.sql.attributes, System.Math, System.Rtti,
     System.TypInfo, JSON.Types, forup.util.constants, forup.util.functions;

type
  {$M+}
  TSQLBuilder = class(TObject)
    private
      _ConnType : TConnType;
      _BaseEntity : TBaseEntity;

      function getSelectCMD : WideString;
    public
      constructor Create(aConnType : TConnType);
    published
      property ConnType : TConnType read _ConnType;
      property BaseEntity : TBaseEntity read _BaseEntity write _BaseEntity;

  end;

const
  SELECT_SCOPE = 'SELECT %s FROM %s';
  UPDATE_SCOPE = 'UPDATE %s (%s) SET %s';
  INSERT_SCOPE = 'INSERT INTO %s (%s) VALUES (%s)';
  DELETE_SCOPE = 'DELETE FROM %s';

implementation

{ TSQLBuilder }

constructor TSQLBuilder.Create(aConnType: TConnType);
begin
  inherited Create;
  Self._ConnType := aConnType;
end;

function TSQLBuilder.getSelectCMD: WideString;
var
  final_cmd : WideString;
begin

  try
    if Assigned(Self._BaseEntity) then
      begin

      end;
  except
    on e : exception do
      begin
        Result := EMPTYSTRING;
        //LogException
      end;
  end;
end;

end.
